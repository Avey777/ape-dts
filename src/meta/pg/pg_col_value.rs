// pub enum PgType {
//     Bool,
//     Bytea,
//     Char,
//     Name,
//     Int8,
//     Int2,
//     Int4,
//     Text,
//     Oid,
//     Json,
//     JsonArray,
//     Point,
//     Lseg,
//     Path,
//     Box,
//     Polygon,
//     Line,
//     LineArray,
//     Cidr,
//     CidrArray,
//     Float4,
//     Float8,
//     Unknown,
//     Circle,
//     CircleArray,
//     Macaddr8,
//     Macaddr8Array,
//     Macaddr,
//     Inet,
//     BoolArray,
//     ByteaArray,
//     CharArray,
//     NameArray,
//     Int2Array,
//     Int4Array,
//     TextArray,
//     BpcharArray,
//     VarcharArray,
//     Int8Array,
//     PointArray,
//     LsegArray,
//     PathArray,
//     BoxArray,
//     Float4Array,
//     Float8Array,
//     PolygonArray,
//     OidArray,
//     MacaddrArray,
//     InetArray,
//     Bpchar,
//     Varchar,
//     Date,
//     Time,
//     Timestamp,
//     TimestampArray,
//     DateArray,
//     TimeArray,
//     Timestamptz,
//     TimestamptzArray,
//     Interval,
//     IntervalArray,
//     NumericArray,
//     Timetz,
//     TimetzArray,
//     Bit,
//     BitArray,
//     Varbit,
//     VarbitArray,
//     Numeric,
//     Record,
//     RecordArray,
//     Uuid,
//     UuidArray,
//     Jsonb,
//     JsonbArray,
//     Int4Range,
//     Int4RangeArray,
//     NumRange,
//     NumRangeArray,
//     TsRange,
//     TsRangeArray,
//     TstzRange,
//     TstzRangeArray,
//     DateRange,
//     DateRangeArray,
//     Int8Range,
//     Int8RangeArray,
//     Jsonpath,
//     JsonpathArray,
//     Money,
//     MoneyArray,

//     // https://www.postgresql.org/docs/9.3/datatype-pseudo.html
//     Void,

//     // A realized user-defined type. When a connection sees a DeclareXX variant it resolves
//     // into this one before passing it along to `accepts` or inside of `Value` objects.
//     Custom(Arc<PgCustomType>),

//     // From [`PgTypeInfo::with_name`]
//     DeclareWithName(UStr),

//     // NOTE: Do we want to bring back type declaration by ID? It's notoriously fragile but
//     //       someone may have a user for it
//     DeclareWithOid(Oid),
// }

pub enum PgColValue {
    //     Bool,
    //     Bytea,
    //     Char,
    //     Name,
    //     Int8,
    //     Int2,
    //     Int4,
    //     Text,
    Oid(sqlx::postgres::types::Oid),
    //     Json,
    //     JsonArray,
    //     Point,
    //     Lseg,
    //     Path,
    //     Box,
    //     Polygon,
    //     Line,
    //     LineArray,
    //     Cidr,
    //     CidrArray,
    //     Float4,
    //     Float8,
    //     Unknown,
    //     Circle,
    //     CircleArray,
    //     Macaddr8,
    //     Macaddr8Array,
    //     Macaddr,
    //     Inet,
    //     BoolArray,
    //     ByteaArray,
    //     CharArray,
    //     NameArray,
    //     Int2Array,
    //     Int4Array,
    //     TextArray,
    //     BpcharArray,
    //     VarcharArray,
    //     Int8Array,
    //     PointArray,
    //     LsegArray,
    //     PathArray,
    //     BoxArray,
    //     Float4Array,
    //     Float8Array,
    //     PolygonArray,
    //     OidArray,
    //     MacaddrArray,
    //     InetArray,
    //     Bpchar,
    //     Varchar,
    //     Date,
    //     Time,
    //     Timestamp,
    //     TimestampArray,
    //     DateArray,
    //     TimeArray,
    //     Timestamptz,
    //     TimestamptzArray,
    //     Interval,
    //     IntervalArray,
    //     NumericArray,
    //     Timetz,
    //     TimetzArray,
    //     Bit,
    //     BitArray,
    //     Varbit,
    //     VarbitArray,
    //     Numeric,
    //     Record,
    //     RecordArray,
    //     Uuid,
    //     UuidArray,
    //     Jsonb,
    //     JsonbArray,
    //     Int4Range,
    //     Int4RangeArray,
    //     NumRange,
    //     NumRangeArray,
    //     TsRange,
    //     TsRangeArray,
    //     TstzRange,
    //     TstzRangeArray,
    //     DateRange,
    //     DateRangeArray,
    //     Int8Range,
    //     Int8RangeArray,
    //     Jsonpath,
    //     JsonpathArray,
    //     Money,
    //     MoneyArray,

    //     // https://www.postgresql.org/docs/9.3/datatype-pseudo.html
    //     Void,

    //     // A realized user-defined type. When a connection sees a DeclareXX variant it resolves
    //     // into this one before passing it along to `accepts` or inside of `Value` objects.
    //     Custom(Arc<PgCustomType>),

    //     // From [`PgTypeInfo::with_name`]
    //     DeclareWithName(UStr),

    //     // NOTE: Do we want to bring back type declaration by ID? It's notoriously fragile but
    //     //       someone may have a user for it
    //     DeclareWithOid(Oid),
}
