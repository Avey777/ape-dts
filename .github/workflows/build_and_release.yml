name: Build and release 

on:
  workflow_dispatch:
    inputs:
      branch:
        required: true
        type: string
        default: main
      tag_name: 
        required: true
        type: string
        default: 
      targets:
        description: 'JSON array of target platforms to build [{"os": "ubuntu-latest", "target": "x86_64-unknown-linux-gnu"}, ...]'
        required: true
        default: '[{"os": "ubuntu-latest", "target": "x86_64-unknown-linux-gnu"}, {"os": "ubuntu-latest", "target": "aarch64-unknown-linux-gnu"}, {"os": "macos-latest", "target": "x86_64-apple-darwin"}]'

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix: 
        include: ${{ fromJson(inputs.targets) }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}

      - name: Check if Release Exists
        id: check_release
        run: |
          RELEASE_ID=$(curl -s -X GET \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ inputs.tag_name }} \
            | jq -r '.id')
          echo "Release ID for tag ${{ inputs.tag_name }}: $RELEASE_ID"
          echo "::set-output name=release_id::$RELEASE_ID"

      - name: Create Release
        if: steps.check_release.outputs.release_id == 'null' || steps.check_release.outputs.release_id == ''
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ inputs.tag_name }}
          files: |
            artifacts/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      # Build linux targets by cross, otherwise there may be runtime errors when running on other linux versions:
      # ./ape-dts: /lib/x86_64-linux-gnu/libm.so.6: version `GLIBC_2.38' not found (required by ./ape-dts)
      # ./ape-dts: /lib/x86_64-linux-gnu/libc.so.6: version `GLIBC_2.38' not found (required by ./ape-dts)
      - name: Cross build
        if: matrix.target == 'x86_64-unknown-linux-gnu' || matrix.target == 'aarch64-unknown-linux-gnu' || matrix.target == 'x86_64-pc-windows-gnu'
        run: |
          cargo install cross
          cross build --release --target=${{ matrix.target }}
      
      - name: Local build
        if: matrix.target == 'x86_64-apple-darwin'
        run: |
          rustup target add ${{ matrix.target }}
          cargo build --release --target=${{ matrix.target }}

      - name: Create release artifact
        run: |
          mkdir -p artifacts
          cp target/${{ matrix.target }}/release/dt-main artifacts/ape-dts
          cp log4rs.yaml artifacts/log4rs.yaml
          tar -czvf ape-dts-${{ github.run_id }}-${{ matrix.target }}.tar.gz -C artifacts .

      - name: Upload Release Asset
        id: upload_release_asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ape-dts-${{ github.run_id }}-${{ matrix.target }}.tar.gz
          asset_name: ape-dts-${{ github.run_id }}-${{ matrix.target }}.tar.gz
          asset_content_type: application/gzip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}